// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type {
	AuthLoginUserData,
	AuthLoginUserResponse,
	AuthLoginUserError,
	AuthRegisterUserData,
	AuthRegisterUserResponse,
	AuthRegisterUserError,
	AuthGetCurrentUserData,
	AuthGetCurrentUserResponse,
	AuthGetCurrentUserError,
	DefaultHealthCheckData
} from './types.gen';
import {
	zAuthLoginUserResponse,
	zAuthRegisterUserResponse,
	zAuthGetCurrentUserResponse
} from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

export class AuthService {
	/**
	 * Login User
	 * Login a user with the given user data.
	 */
	public static loginUser<ThrowOnError extends boolean = false>(
		options: Options<AuthLoginUserData, ThrowOnError>
	) {
		return (options.client ?? _heyApiClient).post<
			AuthLoginUserResponse,
			AuthLoginUserError,
			ThrowOnError
		>({
			responseValidator: async (data) => {
				return await zAuthLoginUserResponse.parseAsync(data);
			},
			url: '/api/v0/auth/login',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options?.headers
			}
		});
	}

	/**
	 * Register User
	 * Register a new user with the given user data.
	 */
	public static registerUser<ThrowOnError extends boolean = false>(
		options: Options<AuthRegisterUserData, ThrowOnError>
	) {
		return (options.client ?? _heyApiClient).post<
			AuthRegisterUserResponse,
			AuthRegisterUserError,
			ThrowOnError
		>({
			responseValidator: async (data) => {
				return await zAuthRegisterUserResponse.parseAsync(data);
			},
			url: '/api/v0/auth/register',
			...options,
			headers: {
				'Content-Type': 'application/json',
				...options?.headers
			}
		});
	}

	/**
	 * Get Current User
	 * Get the current user by email.
	 */
	public static getCurrentUser<ThrowOnError extends boolean = false>(
		options: Options<AuthGetCurrentUserData, ThrowOnError>
	) {
		return (options.client ?? _heyApiClient).get<
			AuthGetCurrentUserResponse,
			AuthGetCurrentUserError,
			ThrowOnError
		>({
			responseValidator: async (data) => {
				return await zAuthGetCurrentUserResponse.parseAsync(data);
			},
			url: '/api/v0/auth/current-user',
			...options
		});
	}
}

export class DefaultService {
	/**
	 * Health Check
	 */
	public static defaultHealthCheck<ThrowOnError extends boolean = false>(
		options?: Options<DefaultHealthCheckData, ThrowOnError>
	) {
		return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
			url: '/api/v0/',
			...options
		});
	}
}
